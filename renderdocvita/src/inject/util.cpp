#include "util.h"

#define CASE2STR(val) case val: \
    return #val;
#define CASE2STR2(val, val2) \
	if (val == val2) { \
		return #val; \
	}

#define TAI_SUCCESS 0
#define TAI_ERROR_SYSTEM 0x90010000
#define TAI_ERROR_MEMORY 0x90010001
#define TAI_ERROR_NOT_FOUND 0x90010002
#define TAI_ERROR_INVALID_ARGS 0x90010003
#define TAI_ERROR_INVALID_KERNEL_ADDR 0x90010004
#define TAI_ERROR_PATCH_EXISTS 0x90010005
#define TAI_ERROR_HOOK_ERROR 0x90010006
#define TAI_ERROR_NOT_IMPLEMENTED 0x90010007
#define TAI_ERROR_USER_MEMORY 0x90010008
#define TAI_ERROR_NOT_ALLOWED 0x90010009
#define TAI_ERROR_STUB_NOT_RESOLVED 0x9001000A
#define TAI_ERROR_INVALID_MODULE 0x9001000B
#define TAI_ERROR_MODULE_OVERFLOW 0x9001000C
#define TAI_ERROR_BLOCKING 0x9001000D

#ifdef __cplusplus
extern "C" {
#endif

char const* taihenerr2str(SceUID res) {
    switch (res) {
    CASE2STR(TAI_SUCCESS);
    CASE2STR(TAI_ERROR_SYSTEM);
    CASE2STR(TAI_ERROR_MEMORY);
    CASE2STR(TAI_ERROR_NOT_FOUND);
    CASE2STR(TAI_ERROR_INVALID_ARGS);
    CASE2STR(TAI_ERROR_INVALID_KERNEL_ADDR);
    CASE2STR(TAI_ERROR_PATCH_EXISTS);
    CASE2STR(TAI_ERROR_HOOK_ERROR);
    CASE2STR(TAI_ERROR_NOT_IMPLEMENTED);
    CASE2STR(TAI_ERROR_USER_MEMORY);
    CASE2STR(TAI_ERROR_NOT_ALLOWED);
    CASE2STR(TAI_ERROR_STUB_NOT_RESOLVED);
    CASE2STR(TAI_ERROR_INVALID_MODULE);
    CASE2STR(TAI_ERROR_MODULE_OVERFLOW);
    CASE2STR(TAI_ERROR_BLOCKING);
    default: return "<invalid taihen result>";
    }
}

char const* sysmodule2str(SceUInt16 id) {
    switch (id) {
	CASE2STR(SCE_SYSMODULE_INVALID)
	CASE2STR(SCE_SYSMODULE_NET)
	CASE2STR(SCE_SYSMODULE_HTTP)
	CASE2STR(SCE_SYSMODULE_SSL)
	CASE2STR(SCE_SYSMODULE_HTTPS)
	CASE2STR(SCE_SYSMODULE_PERF)
	CASE2STR(SCE_SYSMODULE_FIBER)
	CASE2STR(SCE_SYSMODULE_ULT)
	CASE2STR(SCE_SYSMODULE_DBG)
	CASE2STR(SCE_SYSMODULE_RAZOR_CAPTURE)
	CASE2STR(SCE_SYSMODULE_RAZOR_HUD)
	CASE2STR(SCE_SYSMODULE_NGS)
	CASE2STR(SCE_SYSMODULE_SULPHA)
	CASE2STR(SCE_SYSMODULE_SAS)
	CASE2STR(SCE_SYSMODULE_PGF)
	CASE2STR(SCE_SYSMODULE_APPUTIL)
	CASE2STR(SCE_SYSMODULE_FIOS2)
	CASE2STR(SCE_SYSMODULE_IME)
	CASE2STR(SCE_SYSMODULE_NP_BASIC)
	CASE2STR(SCE_SYSMODULE_SYSTEM_GESTURE)
	CASE2STR(SCE_SYSMODULE_LOCATION)
	CASE2STR(SCE_SYSMODULE_NP)
	CASE2STR(SCE_SYSMODULE_PHOTO_EXPORT)
	CASE2STR(SCE_SYSMODULE_XML)
	CASE2STR(SCE_SYSMODULE_NP_COMMERCE2)
	CASE2STR(SCE_SYSMODULE_NP_UTILITY)
	CASE2STR(SCE_SYSMODULE_VOICE)
	CASE2STR(SCE_SYSMODULE_VOICEQOS)
	CASE2STR(SCE_SYSMODULE_NP_MATCHING2)
	CASE2STR(SCE_SYSMODULE_SCREEN_SHOT)
	CASE2STR(SCE_SYSMODULE_NP_SCORE_RANKING)
	CASE2STR(SCE_SYSMODULE_SQLITE)
	CASE2STR(SCE_SYSMODULE_TRIGGER_UTIL)
	CASE2STR(SCE_SYSMODULE_RUDP)
	CASE2STR(SCE_SYSMODULE_CODECENGINE_PERF)
	CASE2STR(SCE_SYSMODULE_LIVEAREA)
	CASE2STR(SCE_SYSMODULE_NP_ACTIVITY)
	CASE2STR(SCE_SYSMODULE_NP_TROPHY)
	CASE2STR(SCE_SYSMODULE_NP_MESSAGE)
	CASE2STR(SCE_SYSMODULE_SHUTTER_SOUND)
	CASE2STR(SCE_SYSMODULE_CLIPBOARD)
	CASE2STR(SCE_SYSMODULE_NP_PARTY)
	CASE2STR(SCE_SYSMODULE_NET_ADHOC_MATCHING)
	CASE2STR(SCE_SYSMODULE_NEAR_UTIL)
	CASE2STR(SCE_SYSMODULE_NP_TUS)
	CASE2STR(SCE_SYSMODULE_MP4)
	CASE2STR(SCE_SYSMODULE_AACENC)
	CASE2STR(SCE_SYSMODULE_HANDWRITING)
	CASE2STR(SCE_SYSMODULE_ATRAC)
	CASE2STR(SCE_SYSMODULE_NP_SNS_FACEBOOK)
	CASE2STR(SCE_SYSMODULE_VIDEO_EXPORT)
	CASE2STR(SCE_SYSMODULE_NOTIFICATION_UTIL)
	CASE2STR(SCE_SYSMODULE_BG_APP_UTIL)
	CASE2STR(SCE_SYSMODULE_INCOMING_DIALOG)
	CASE2STR(SCE_SYSMODULE_IPMI)
	CASE2STR(SCE_SYSMODULE_AUDIOCODEC)
	CASE2STR(SCE_SYSMODULE_FACE)
	CASE2STR(SCE_SYSMODULE_SMART)
	CASE2STR(SCE_SYSMODULE_MARLIN)
	CASE2STR(SCE_SYSMODULE_MARLIN_DOWNLOADER)
	CASE2STR(SCE_SYSMODULE_MARLIN_APP_LIB)
	CASE2STR(SCE_SYSMODULE_TELEPHONY_UTIL)
	CASE2STR(SCE_SYSMODULE_PSPNET_ADHOC)
	CASE2STR(SCE_SYSMODULE_DTCP_IP)
	CASE2STR(SCE_SYSMODULE_VIDEO_SEARCH_EMPR)
	CASE2STR(SCE_SYSMODULE_NP_SIGNALING)
	CASE2STR(SCE_SYSMODULE_BEISOBMF)
	CASE2STR(SCE_SYSMODULE_BEMP2SYS)
	CASE2STR(SCE_SYSMODULE_MUSIC_EXPORT)
	CASE2STR(SCE_SYSMODULE_NEAR_DIALOG_UTIL)
	CASE2STR(SCE_SYSMODULE_LOCATION_EXTENSION)
	CASE2STR(SCE_SYSMODULE_AVPLAYER)
	CASE2STR(SCE_SYSMODULE_GAME_UPDATE)
	CASE2STR(SCE_SYSMODULE_MAIL_API)
	CASE2STR(SCE_SYSMODULE_TELEPORT_CLIENT)
	CASE2STR(SCE_SYSMODULE_TELEPORT_SERVER)
	CASE2STR(SCE_SYSMODULE_MP4_RECORDER)
	CASE2STR(SCE_SYSMODULE_APPUTIL_EXT)
	CASE2STR(SCE_SYSMODULE_NP_WEBAPI)
	CASE2STR(SCE_SYSMODULE_AVCDEC)
	CASE2STR(SCE_SYSMODULE_JSON)
    default: return "<invalid module>";
    }
}

char const* sysmodres2str(int res) {
	switch (res)
	{
	CASE2STR(SCE_SYSMODULE_LOADED);
	CASE2STR(SCE_SYSMODULE_ERROR_INVALID_VALUE);
	CASE2STR(SCE_SYSMODULE_ERROR_UNLOADED);
	CASE2STR(SCE_SYSMODULE_ERROR_FATAL);
	default: return "<invalid res>";
	}
}

const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM2_RW = (SceKernelMemBlockType)0x05408060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW_UNCACHE_EXTERNAL = (SceKernelMemBlockType)0x09404060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RO_UNCACHE = (SceKernelMemBlockType)0x09408040;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_DEVICE_RW = (SceKernelMemBlockType)0x0C200860;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_NC_RW = (SceKernelMemBlockType)0x0C208060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_RO = (SceKernelMemBlockType)0x0C20D040;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_GAME_RW = (SceKernelMemBlockType)0x0C50D060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN_RW_UNCACHE = (SceKernelMemBlockType)0x0CA08060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN_RW = (SceKernelMemBlockType)0x0CA0D060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN2_RW = (SceKernelMemBlockType)0x0CF0D060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RO_UNCACHE = (SceKernelMemBlockType)0x0E208040;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RX_UNCACHE = (SceKernelMemBlockType)0x0E208050;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RW_UNCACHE = (SceKernelMemBlockType)0x0E208060;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RO = (SceKernelMemBlockType)0x0E20D040;
const SceKernelMemBlockType SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RW = (SceKernelMemBlockType)0x0E20D060;

char const* kernelmemblock2str(SceKernelMemBlockType mem) {
	switch (mem)
	{
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_RW_UNCACHE);
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_RX);
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_RW);
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_RW);
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_NC_RW);
	CASE2STR(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW);
	default: break;
	}

	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW_UNCACHE_EXTERNAL, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM2_RW, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RO_UNCACHE, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_DEVICE_RW, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_RO, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_GAME_RW, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN_RW_UNCACHE, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN_RW, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_UNKNOWN2_RW, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RO_UNCACHE, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RX_UNCACHE, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RW_UNCACHE, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RO, mem);
	CASE2STR2(SCE_KERNEL_MEMBLOCK_TYPE_USER_CDIALOG_RW, mem);

	return "<invalid mem>";
}

#ifdef __cplusplus
}
#endif
